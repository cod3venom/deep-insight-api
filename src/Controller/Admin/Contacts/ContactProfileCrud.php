<?php

/*
	 * Project: deep-insight-api.
	 * Author: Levan Ostrowski
	 * User: cod3venom
	 * Date: 24.02.2022
	 * Time: 15:02
	*/
	
namespace App\Controller\Admin\Contacts;

use App\Entity\Contact\ContactCompany;
use App\Entity\Contact\ContactProfile;
use App\Modules\StringBuilder\StringBuilder;
use App\Repository\ContactProfileRepository;
use App\Repository\UserProfileRepository;
use Doctrine\ORM\EntityManagerInterface;
use EasyCorp\Bundle\EasyAdminBundle\Config\Crud;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;
use EasyCorp\Bundle\EasyAdminBundle\Field\ArrayField;
use EasyCorp\Bundle\EasyAdminBundle\Field\AssociationField;
use EasyCorp\Bundle\EasyAdminBundle\Field\ChoiceField;
use EasyCorp\Bundle\EasyAdminBundle\Field\CollectionField;
use EasyCorp\Bundle\EasyAdminBundle\Field\DateField;
use EasyCorp\Bundle\EasyAdminBundle\Field\FormField;
use EasyCorp\Bundle\EasyAdminBundle\Field\ImageField;
use EasyCorp\Bundle\EasyAdminBundle\Field\NumberField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextareaField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;
use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface;

class ContactProfileCrud extends AbstractCrudController
{
	public function __construct(
		private  ParameterBagInterface $parameterBag,
		private ContactProfileRepository $contactProfileRepository,
		private UserProfileRepository $userProfileRepository
	)
	{
	}
	
	
	public static function getEntityFqcn(): string
	{
		return ContactProfile::class;
	}
	
	public function persistEntity(EntityManagerInterface $entityManager, $entityInstance): void
	{
		if (!($entityInstance instanceof ContactProfile)) {
			return;
		}
		
		$contact = $entityInstance;
		$company = $entityInstance->getContactCompany();
		$photoUrl = (new StringBuilder())
			->append($_ENV['BACKEND_AVATARS_URL'])
			->append($contact->getPhoto());
		
		$contact
			->setPhoto($photoUrl)
			->genContactId()
			->setCreatedAt();
		
		$company->
			setCreatedAt();
		
		
		$contact->setContactCompany($company);
		
		$entityManager->persist($contact);
		
		$company->setId($contact->getId());
		
		$entityManager->flush();
	}
	
	public function updateEntity(EntityManagerInterface $entityManager, $entityInstance): void
	{
		if (!($entityInstance instanceof ContactProfile)) {
			return;
		}
		$contact = $entityInstance;
		
		$photoUrl = (new StringBuilder())
			->append($_ENV['BACKEND_AVATARS_URL'])
			->append($contact->getPhoto());
		
		if (empty($contact->getPhoto())) {
			$contact->setPhoto($photoUrl);
		}
		if (!str_contains($_ENV['BACKEND_AVATARS_URL'], $contact->getPhoto())) {
			$contact->setPhoto($photoUrl);
		}
		
		$contact->setUpdatedAt();
		$contact->getContactCompany()->setUpdatedAt();
		
		$entityManager->persist($contact);
		$entityManager->flush();
	}
	
	public function deleteEntity(EntityManagerInterface $entityManager, $entityInstance): void
	{
		parent::deleteEntity($entityManager, $entityInstance); // TODO: Change the autogenerated stub
	}
	
	public function configureFields(string $pageName): iterable
	{
		
	 
		// Profile
		
		$id  = NumberField::new('id', 'ID')->hideOnForm();
		$owner = ChoiceField::new('ownerUserId', 'Owner')
			
			->setChoices($this->userProfileRepository->getUserListForAdminDashboard());
		
		$avatar = ImageField::new('photo', 'Profile image')
			->setUploadDir($this->parameterBag->get('user_avatars_upload_dir'))
			->setBasePath($this->parameterBag->get('user_avatars_upload_dir_base'));
		
		$firstName = TextField::new('firstName', 'First Name');
		$lasName = TextField::new('lastName', 'Last Name');
		$email = TextField::new('email');
		$birthDay =  DateField::new('birthDay', 'Birth Day')
			
			->setFormat('d/m/Y')
			->setHelp('Choose birth date of the contact');
		
		$placeOfBirth = TextField::new('placeOfBirth', 'Place of birth');
		$positionInTheCompany = TextField::new('positionInTheCompany', 'Position In The Company')->setRequired(false);
		$linksToProfiles = TextareaField::new('linksToProfiles', 'Links to profiles');
		$notes = TextareaField::new('notes', 'Notes, Descriptions, Comments');
		$country = TextField::new('country', 'Country');
		
		
		
		// Company
		$companyName = TextField::new('contactCompany.companyName', 'Name');
		$companyWWW = TextField::new('contactCompany.companyWww', 'WWW');
		$companyIndustry = TextField::new('contactCompany.companyIndustry', 'Industry');
		$wayToEarnMoney = TextField::new('contactCompany.wayToEarnMoney', 'Way to earn money');
		$regon = TextField::new('contactCompany.regon', 'Regon');
		$krs = TextField::new('contactCompany.krs', 'KRS');
		$nip = TextField::new('contactCompany.nip', 'NIP');
		$districts = TextField::new('contactCompany.districts', 'Districts');
		$headQuartersCity = TextField::new('contactCompany.headQuartersCity', 'Head quarters');
		$businessEmails = TextField::new('contactCompany.businessEmails', 'Business Emails');
		$businessPhones = TextField::new('contactCompany.businessPhones', 'Business Phones');
		$revenue = TextField::new('contactCompany.revenue', 'Revenue');
		$profit = TextField::new('contactCompany.profit', 'Profit');
		$growthYearToYear = TextField::new('contactCompany.growthYearToYear', 'Growth year to year');
		$categories = TextField::new('contactCompany.categories', 'Categories');

		
		if (Crud::PAGE_INDEX === $pageName) {
			return [$avatar, $firstName, $lasName, $email, $country];
		}
		
		return [
			FormField::addPanel('Profile'),
			$id,
			$owner, $avatar, $firstName, $lasName, $email,
			$birthDay, $placeOfBirth, $positionInTheCompany, $linksToProfiles, $notes,
			$country,
			FormField::addPanel('Company'),
			$companyName, $companyWWW, $companyIndustry,
			$wayToEarnMoney, $regon, $krs, $nip,
			$districts, $headQuartersCity,
			$businessEmails, $businessPhones,
			$revenue, $profit, $growthYearToYear, $categories
		
		];
	}
}
